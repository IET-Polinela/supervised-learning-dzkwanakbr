{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1Zpfjl0IYnEbwNQvmooLM8Zd8tvCcOAdI","authorship_tag":"ABX9TyOedIJimlFrPmlU6HZGOHAs"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1TB2VhBEfe6B","executionInfo":{"status":"ok","timestamp":1743033966571,"user_tz":-420,"elapsed":108886,"user":{"displayName":"Dzakwan Akbar","userId":"10974690383539103573"}},"outputId":"1000c354-4081-46c9-adfc-246fe80b82cc"},"outputs":[{"output_type":"stream","name":"stdout","text":["Cloning into 'supervised-learning-dzkwanakbr'...\n","remote: Enumerating objects: 23, done.\u001b[K\n","remote: Counting objects: 100% (23/23), done.\u001b[K\n","remote: Compressing objects: 100% (20/20), done.\u001b[K\n","remote: Total 23 (delta 4), reused 22 (delta 3), pack-reused 0 (from 0)\u001b[K\n","Receiving objects: 100% (23/23), 1.58 MiB | 6.05 MiB/s, done.\n","Resolving deltas: 100% (4/4), done.\n"]}],"source":["from google.colab import auth\n","auth.authenticate_user()\n","!git config --global user.email \"akbardzakwan41@gmail.com\"\n","!git config --global user.name \"Dzakwan_akbar_perdana_wijayaa\"\n","!git clone https://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@github.com/IET-Polinela/supervised-learning-dzkwanakbr.git\n","\n"]},{"cell_type":"code","source":["!cd supervised-learning-dzkwanakbr/"],"metadata":{"id":"62rcLQgkg0wW","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1743034038064,"user_tz":-420,"elapsed":11,"user":{"displayName":"Dzakwan Akbar","userId":"10974690383539103573"}},"outputId":"cf387475-8deb-4b60-bcd8-883d2caf2714"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/supervised-learning-dzkwanakbr\n"]}]},{"cell_type":"code","source":["!cd .."],"metadata":{"id":"SRv4hj6UuovB","executionInfo":{"status":"ok","timestamp":1743039875496,"user_tz":-420,"elapsed":95,"user":{"displayName":"Dzakwan Akbar","userId":"10974690383539103573"}}},"execution_count":52,"outputs":[]},{"cell_type":"code","source":["!git add ."],"metadata":{"id":"813VkVnjxwP1","executionInfo":{"status":"ok","timestamp":1743039700399,"user_tz":-420,"elapsed":315,"user":{"displayName":"Dzakwan Akbar","userId":"10974690383539103573"}}},"execution_count":46,"outputs":[]},{"cell_type":"code","source":["!git commit -m \"knn regression and folder visualisasion\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6rgraqBDx5HO","executionInfo":{"status":"ok","timestamp":1743039701482,"user_tz":-420,"elapsed":233,"user":{"displayName":"Dzakwan Akbar","userId":"10974690383539103573"}},"outputId":"bbcd50f3-c2a8-46f6-cc25-cd11524f1a9a"},"execution_count":47,"outputs":[{"output_type":"stream","name":"stdout","text":["[main 46c5fbf] knn regression and folder visualisasion\n"," 43 files changed, 147 insertions(+), 27 deletions(-)\n"," create mode 100644 knn_visualisasi/knn_regression_with_outliers_k3.png\n"," create mode 100644 knn_visualisasi/knn_regression_with_outliers_k5.png\n"," create mode 100644 knn_visualisasi/knn_regression_with_outliers_k7.png\n"," create mode 100644 knn_visualisasi/knn_regression_without_outliers_k3.png\n"," create mode 100644 knn_visualisasi/knn_regression_without_outliers_k5.png\n"," create mode 100644 knn_visualisasi/knn_regression_without_outliers_k7.png\n"," create mode 100644 knn_visualisasi/residual_distribution_with_outliers_k3.png\n"," create mode 100644 knn_visualisasi/residual_distribution_with_outliers_k5.png\n"," create mode 100644 knn_visualisasi/residual_distribution_with_outliers_k7.png\n"," create mode 100644 knn_visualisasi/residual_distribution_without_outliers_k3.png\n"," create mode 100644 knn_visualisasi/residual_distribution_without_outliers_k5.png\n"," create mode 100644 knn_visualisasi/residual_distribution_without_outliers_k7.png\n"," create mode 100644 knn_visualisasi/residual_plot_with_outliers_k3.png\n"," create mode 100644 knn_visualisasi/residual_plot_with_outliers_k5.png\n"," create mode 100644 knn_visualisasi/residual_plot_with_outliers_k7.png\n"," create mode 100644 knn_visualisasi/residual_plot_without_outliers_k3.png\n"," create mode 100644 knn_visualisasi/residual_plot_without_outliers_k5.png\n"," create mode 100644 knn_visualisasi/residual_plot_without_outliers_k7.png\n"," create mode 100644 knnregression.py\n"," create mode 100644 polynomial_visualisasi/polynomial_residual_dist_with_outliers_degree_2.png\n"," create mode 100644 polynomial_visualisasi/polynomial_residual_dist_with_outliers_degree_3.png\n"," create mode 100644 polynomial_visualisasi/polynomial_residual_dist_without_outliers_degree_2.png\n"," create mode 100644 polynomial_visualisasi/polynomial_residual_dist_without_outliers_degree_3.png\n"," create mode 100644 polynomial_visualisasi/polynomial_residual_with_outliers_degree_2.png\n"," create mode 100644 polynomial_visualisasi/polynomial_residual_with_outliers_degree_3.png\n"," create mode 100644 polynomial_visualisasi/polynomial_residual_without_outliers_degree_2.png\n"," create mode 100644 polynomial_visualisasi/polynomial_residual_without_outliers_degree_3.png\n"," create mode 100644 polynomial_visualisasi/polynomial_scatter_with_outliers_degree_2.png\n"," create mode 100644 polynomial_visualisasi/polynomial_scatter_with_outliers_degree_3.png\n"," create mode 100644 polynomial_visualisasi/polynomial_scatter_without_outliers_degree_2.png\n"," create mode 100644 polynomial_visualisasi/polynomial_scatter_without_outliers_degree_3.png\n"," delete mode 100644 polynomial_with_outliers_degree_2.png\n"," delete mode 100644 polynomial_with_outliers_degree_3.png\n"," delete mode 100644 polynomial_without_outliers_degree_2.png\n"," delete mode 100644 polynomial_without_outliers_degree_3.png\n"," rename linear_regression_with_outliers.png => visualisasi_linear/linear_regression_with_outliers.png (100%)\n"," rename linear_regression_without_outliers.png => visualisasi_linear/linear_regression_without_outliers.png (100%)\n"," rename residual_distribution_with_outliers.png => visualisasi_linear/linear_residual_distribution_with_outliers.png (100%)\n"," rename residual_distribution_without_outliers.png => visualisasi_linear/linear_residual_distribution_without_outliers.png (100%)\n"," rename residual_plot_with_outliers.png => visualisasi_linear/linear_residual_plot_with_outliers.png (100%)\n"," rename residual_plot_without_outliers.png => visualisasi_linear/linear_residual_plot_without_outliers.png (100%)\n"]}]},{"cell_type":"code","source":["!git push origin main"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HwC0RpWmyDSe","executionInfo":{"status":"ok","timestamp":1743039706777,"user_tz":-420,"elapsed":2723,"user":{"displayName":"Dzakwan Akbar","userId":"10974690383539103573"}},"outputId":"fc167f44-306d-4301-fe60-01bfb56573a1"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["Enumerating objects: 41, done.\n","Counting objects:   2% (1/41)\rCounting objects:   4% (2/41)\rCounting objects:   7% (3/41)\rCounting objects:   9% (4/41)\rCounting objects:  12% (5/41)\rCounting objects:  14% (6/41)\rCounting objects:  17% (7/41)\rCounting objects:  19% (8/41)\rCounting objects:  21% (9/41)\rCounting objects:  24% (10/41)\rCounting objects:  26% (11/41)\rCounting objects:  29% (12/41)\rCounting objects:  31% (13/41)\rCounting objects:  34% (14/41)\rCounting objects:  36% (15/41)\rCounting objects:  39% (16/41)\rCounting objects:  41% (17/41)\rCounting objects:  43% (18/41)\rCounting objects:  46% (19/41)\rCounting objects:  48% (20/41)\rCounting objects:  51% (21/41)\rCounting objects:  53% (22/41)\rCounting objects:  56% (23/41)\rCounting objects:  58% (24/41)\rCounting objects:  60% (25/41)\rCounting objects:  63% (26/41)\rCounting objects:  65% (27/41)\rCounting objects:  68% (28/41)\rCounting objects:  70% (29/41)\rCounting objects:  73% (30/41)\rCounting objects:  75% (31/41)\rCounting objects:  78% (32/41)\rCounting objects:  80% (33/41)\rCounting objects:  82% (34/41)\rCounting objects:  85% (35/41)\rCounting objects:  87% (36/41)\rCounting objects:  90% (37/41)\rCounting objects:  92% (38/41)\rCounting objects:  95% (39/41)\rCounting objects:  97% (40/41)\rCounting objects: 100% (41/41)\rCounting objects: 100% (41/41), done.\n","Delta compression using up to 2 threads\n","Compressing objects: 100% (38/38), done.\n","Writing objects: 100% (38/38), 1004.06 KiB | 11.03 MiB/s, done.\n","Total 38 (delta 3), reused 0 (delta 0), pack-reused 0\n","remote: Resolving deltas: 100% (3/3), completed with 3 local objects.\u001b[K\n","To https://github.com/IET-Polinela/supervised-learning-dzkwanakbr.git\n","   621efff..46c5fbf  main -> main\n"]}]},{"cell_type":"code","source":["%%writefile dataunderstanding.py\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# Load dataset\n","file_path = \"train.csv\"\n","df = pd.read_csv(file_path)\n","\n","# Hitung statistik deskriptif\n","stats = df.describe(percentiles=[0.25, 0.5, 0.75]).T\n","stats = stats.rename(columns={\"50%\": \"Q2 (Median)\", \"25%\": \"Q1 (25%)\", \"75%\": \"Q3 (75%)\"})\n","stats[\"count\"] = df.count()\n","\n","# Visualisasi distribusi fitur numerik (boxplot)\n","plt.figure(figsize=(12, 6))\n","sns.boxplot(data=df.select_dtypes(include=['number']))\n","plt.xticks(rotation=45)\n","plt.title(\"Boxplot Fitur Numerik\")\n","plt.savefig(\"boxplot_features.png\")  # Simpan sebagai PNG\n","plt.close()\n","\n","# Visualisasi distribusi mean, median, dan standar deviasi\n","plt.figure(figsize=(12, 6))\n","stats[['mean', 'Q2 (Median)', 'std']].plot(kind='bar', figsize=(12, 6))\n","plt.title(\"Statistik Deskriptif (Mean, Median, Std Dev)\")\n","plt.ylabel(\"Nilai\")\n","plt.xticks(rotation=45)\n","plt.legend()\n","plt.savefig(\"statistik_deskriptif.png\")  # Simpan sebagai PNG\n","plt.close()\n","\n","# Simpan hasil statistik deskriptif ke CSV\n","stats.to_csv(\"statistik_deskriptif.csv\")\n","\n","print(\"Visualisasi dan hasil statistik telah disimpan sebagai PNG dan CSV.\")\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OUXtNVBPiSJk","executionInfo":{"status":"ok","timestamp":1742894128226,"user_tz":-420,"elapsed":54,"user":{"displayName":"Dzakwan Akbar","userId":"10974690383539103573"}},"outputId":"296286c4-9ef3-4ea6-f9ea-30c6fec1fa91"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Overwriting dataunderstanding.py\n"]}]},{"cell_type":"code","source":["!python dataunderstanding.py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WBgUX7FBneTI","executionInfo":{"status":"ok","timestamp":1742894136670,"user_tz":-420,"elapsed":4960,"user":{"displayName":"Dzakwan Akbar","userId":"10974690383539103573"}},"outputId":"ec3ff3bb-4533-4df8-f73e-b9cfd86663a4"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Visualisasi dan hasil statistik telah disimpan sebagai PNG dan CSV.\n"]}]},{"cell_type":"code","source":["%%writefile datapreprocessing.py\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","\n","# Load dataset\n","file_path = \"train.csv\"\n","df = pd.read_csv(file_path)\n","\n","# Identifikasi fitur numerik dan nonnumerik\n","numerical_features = df.select_dtypes(include=[\"int64\", \"float64\"]).columns\n","categorical_features = df.select_dtypes(include=[\"object\"]).columns\n","\n","# 1️⃣ Encoding fitur nonnumerik dengan LabelEncoder\n","df_encoded = df.copy()\n","label_encoders = {}\n","\n","for col in categorical_features:\n","    le = LabelEncoder()\n","    df_encoded[col] = le.fit_transform(df[col].astype(str))\n","    label_encoders[col] = le  # Simpan encoder untuk referensi jika diperlukan\n","\n","# 2️⃣ Pisahkan fitur independent (X) dan target (Y)\n","X = df_encoded.drop(columns=[\"SalePrice\", \"Id\"])  # Hapus \"Id\" karena bukan fitur penting\n","Y = df_encoded[\"SalePrice\"]\n","\n","# 3️⃣ Membagi dataset menjadi training dan testing (80:20)\n","X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)\n","\n","# 4️⃣ Gabungkan kembali training & testing ke dalam satu dataset dengan label \"Train\" dan \"Test\"\n","df_encoded[\"DataType\"] = \"Train\"\n","df_encoded.loc[X_test.index, \"DataType\"] = \"Test\"\n","\n","# 5️⃣ Simpan dataset hasil preprocessing\n","df_encoded.to_csv(\"data_encode.csv\", index=False)\n","\n","# 🔍 Menampilkan informasi dataset setelah preprocessing\n","print(\"📌 Dataset setelah preprocessing disimpan sebagai 'data_encode.csv'\")\n","print(f\"Total data: {df_encoded.shape}\")\n","print(f\"Fitur numerik: {len(numerical_features)} | Fitur kategori: {len(categorical_features)}\")\n","print(f\"Training Data: {X_train.shape} | Testing Data: {X_test.shape}\")\n","\n","# Tampilkan beberapa data pertama\n","print(\"\\n📊 Contoh data setelah preprocessing:\")\n","print(df_encoded.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ttl7_xTQ3sEi","executionInfo":{"status":"ok","timestamp":1742894697707,"user_tz":-420,"elapsed":54,"user":{"displayName":"Dzakwan Akbar","userId":"10974690383539103573"}},"outputId":"911c1cd4-2ec5-4986-90dd-6156dd2438dc"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Overwriting datapreprocessing.py\n"]}]},{"cell_type":"code","source":["!python datapreprocessing.py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7X_q30cs33jz","executionInfo":{"status":"ok","timestamp":1742894705288,"user_tz":-420,"elapsed":4473,"user":{"displayName":"Dzakwan Akbar","userId":"10974690383539103573"}},"outputId":"2c64ce8a-5e4d-4e1c-9228-263c4dd00961"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["📌 Dataset setelah preprocessing disimpan sebagai 'data_encode.csv'\n","Total data: (1460, 82)\n","Fitur numerik: 38 | Fitur kategori: 43\n","Training Data: (1168, 79) | Testing Data: (292, 79)\n","\n","📊 Contoh data setelah preprocessing:\n","   Id  MSSubClass  MSZoning  LotFrontage  ...  SaleType  SaleCondition  SalePrice  DataType\n","0   1          60         3         65.0  ...         8              4     208500     Train\n","1   2          20         3         80.0  ...         8              4     181500     Train\n","2   3          60         3         68.0  ...         8              4     223500     Train\n","3   4          70         3         60.0  ...         8              0     140000     Train\n","4   5          60         3         84.0  ...         8              4     250000     Train\n","\n","[5 rows x 82 columns]\n"]}]},{"cell_type":"code","source":["%%writefile outlierhandling.py\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# Load dataset\n","file_path = \"data_encode.csv\"\n","df = pd.read_csv(file_path)\n","\n","# Identifikasi fitur numerik\n","numerical_features = df.select_dtypes(include=[\"int64\", \"float64\"]).columns\n","\n","# Visualisasi outlier dengan boxplot dalam satu gambar\n","plt.figure(figsize=(12, 6))\n","sns.boxplot(data=df[numerical_features])\n","plt.xticks(rotation=90)\n","plt.title(\"Visualisasi Outlier pada Fitur Numerik\")\n","plt.savefig(\"outlier_visualization.png\")  # Simpan gambar visualisasi\n","plt.show()\n","\n","# Menggunakan metode IQR untuk mendeteksi outlier\n","Q1 = df[numerical_features].quantile(0.25)\n","Q3 = df[numerical_features].quantile(0.75)\n","IQR = Q3 - Q1\n","\n","# Menentukan batas bawah dan atas\n","lower_bound = Q1 - 1.5 * IQR\n","upper_bound = Q3 + 1.5 * IQR\n","\n","# Menandai outlier\n","outlier_mask = (df[numerical_features] < lower_bound) | (df[numerical_features] > upper_bound)\n","\n","# Dataset dengan outlier (asli)\n","df_with_outliers = df.copy()\n","df_with_outliers.to_csv(\"data_with_outliers.csv\", index=False)\n","\n","# Dataset tanpa outlier\n","df_without_outliers = df[~outlier_mask.any(axis=1)]\n","df_without_outliers.to_csv(\"data_without_outliers.csv\", index=False)\n","\n","print(\"✅ Proses selesai. Dataset telah disimpan:\")\n","print(\"- data_with_outliers.csv (dengan outlier)\")\n","print(\"- data_without_outliers.csv (tanpa outlier)\")\n","print(\"- outlier_visualization.png (visualisasi outlier)\")\n","\n"],"metadata":{"id":"WaXyMgHQiBVw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742897233362,"user_tz":-420,"elapsed":34,"user":{"displayName":"Dzakwan Akbar","userId":"10974690383539103573"}},"outputId":"83885838-d8e2-4b97-9d04-46a33d48394b"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["Overwriting outlierhandling.py\n"]}]},{"cell_type":"code","source":["!python outlierhandling.py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dcvhKT0Urxf5","executionInfo":{"status":"ok","timestamp":1742897241814,"user_tz":-420,"elapsed":5277,"user":{"displayName":"Dzakwan Akbar","userId":"10974690383539103573"}},"outputId":"7e335703-aab2-4aaf-a876-98edecb13de8"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["Figure(1200x600)\n","✅ Proses selesai. Dataset telah disimpan:\n","- data_with_outliers.csv (dengan outlier)\n","- data_without_outliers.csv (tanpa outlier)\n","- outlier_visualization.png (visualisasi outlier)\n"]}]},{"cell_type":"code","source":["!rm -rf polynomial_visualisasi/\n","\n","\n"],"metadata":{"id":"tGAisTHwuFVe","executionInfo":{"status":"ok","timestamp":1743038755333,"user_tz":-420,"elapsed":128,"user":{"displayName":"Dzakwan Akbar","userId":"10974690383539103573"}}},"execution_count":40,"outputs":[]},{"cell_type":"code","source":["%%writefile feature_scaling.py\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from sklearn.preprocessing import StandardScaler, MinMaxScaler\n","\n","# Load dataset tanpa outlier\n","file_path = \"data_without_outliers.csv\"\n","df = pd.read_csv(file_path)\n","\n","# Identifikasi fitur numerik\n","numerical_features = df.select_dtypes(include=[\"int64\", \"float64\"]).columns\n","\n","# Scaling menggunakan StandardScaler\n","scaler_standard = StandardScaler()\n","df_standard = df.copy()\n","df_standard[numerical_features] = scaler_standard.fit_transform(df[numerical_features])\n","\n","# Scaling menggunakan MinMaxScaler\n","scaler_minmax = MinMaxScaler()\n","df_minmax = df.copy()\n","df_minmax[numerical_features] = scaler_minmax.fit_transform(df[numerical_features])\n","\n","# Simpan hasil scaling ke dalam satu dataset\n","df_standard[\"ScalingType\"] = \"StandardScaler\"\n","df_minmax[\"ScalingType\"] = \"MinMaxScaler\"\n","df_combined = pd.concat([df_standard, df_minmax])\n","\n","# Simpan dataset hasil scaling\n","df_combined.to_csv(\"dataset_clean_proces.csv\", index=False)\n","\n","# Visualisasi distribusi data sebelum dan sesudah scaling\n","fig, axes = plt.subplots(len(numerical_features), 3, figsize=(12, len(numerical_features) * 3))\n","\n","for i, feature in enumerate(numerical_features):\n","    # Histogram sebelum scaling\n","    axes[i, 0].hist(df[feature], bins=30, color=\"blue\", alpha=0.7)\n","    axes[i, 0].set_title(f\"Original: {feature}\")\n","\n","    # Histogram setelah StandardScaler\n","    axes[i, 1].hist(df_standard[feature], bins=30, color=\"red\", alpha=0.7)\n","    axes[i, 1].set_title(f\"StandardScaler: {feature}\")\n","\n","    # Histogram setelah MinMaxScaler\n","    axes[i, 2].hist(df_minmax[feature], bins=30, color=\"green\", alpha=0.7)\n","    axes[i, 2].set_title(f\"MinMaxScaler: {feature}\")\n","\n","plt.tight_layout()\n","plt.savefig(\"feature_scaling_comparison.png\")  # Simpan visualisasi\n","plt.show()\n","\n","print(\"Feature scaling selesai. Dataset tersimpan sebagai 'dataset_clean_proces.csv'.\")\n","print(\"Visualisasi perbandingan scaling disimpan sebagai 'feature_scaling_comparison.png'.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fIoRUHXsxRgD","executionInfo":{"status":"ok","timestamp":1742984595387,"user_tz":-420,"elapsed":68,"user":{"displayName":"Dzakwan Akbar","userId":"10974690383539103573"}},"outputId":"435585d7-775d-4fd3-dafe-001ab3aff42c"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Writing feature_scaling.py\n"]}]},{"cell_type":"code","source":["!python feature_scaling.py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VFJ7Gv9NsgKV","executionInfo":{"status":"ok","timestamp":1742984658706,"user_tz":-420,"elapsed":53196,"user":{"displayName":"Dzakwan Akbar","userId":"10974690383539103573"}},"outputId":"e42ff7db-707a-4032-f3f7-c18cbe0974c4"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["Figure(1200x24300)\n","Feature scaling selesai. Dataset tersimpan sebagai 'dataset_clean_proces.csv'.\n","Visualisasi perbandingan scaling disimpan sebagai 'feature_scaling_comparison.png'.\n"]}]},{"cell_type":"code","source":["%%writefile linear_regression.py\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import os\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import mean_squared_error, r2_score\n","\n","# Membuat folder untuk menyimpan visualisasi jika belum ada\n","visualisasi_folder = \"visualisasi_linear\"\n","os.makedirs(visualisasi_folder, exist_ok=True)\n","\n","# Load dataset\n","file_with_outliers = \"data_with_outliers.csv\"\n","file_without_outliers = \"dataset_clean_proces.csv\"\n","\n","try:\n","    df_with_outliers = pd.read_csv(file_with_outliers)\n","    df_without_outliers = pd.read_csv(file_without_outliers)\n","    print(\"Dataset berhasil dimuat!\")\n","except Exception as e:\n","    print(f\"Error saat membaca dataset: {e}\")\n","    exit()\n","\n","# Menghapus missing values\n","df_with_outliers.dropna(inplace=True)\n","df_without_outliers.dropna(inplace=True)\n","\n","# Memastikan semua kolom numerik\n","df_with_outliers = df_with_outliers.select_dtypes(include=[np.number])\n","df_without_outliers = df_without_outliers.select_dtypes(include=[np.number])\n","\n","# Memisahkan fitur dan target\n","if \"SalePrice\" in df_with_outliers.columns and \"SalePrice\" in df_without_outliers.columns:\n","    X_with_outliers = df_with_outliers.drop(columns=[\"SalePrice\"])\n","    Y_with_outliers = df_with_outliers[\"SalePrice\"]\n","\n","    X_without_outliers = df_without_outliers.drop(columns=[\"SalePrice\"])\n","    Y_without_outliers = df_without_outliers[\"SalePrice\"]\n","else:\n","    print(\"Kolom 'SalePrice' tidak ditemukan dalam dataset.\")\n","    exit()\n","\n","# Fungsi untuk menerapkan Linear Regression dan membuat visualisasi\n","def linear_regression(X, Y, label):\n","    model = LinearRegression()\n","    model.fit(X, Y)\n","    Y_pred = model.predict(X)\n","\n","    mse = mean_squared_error(Y, Y_pred)\n","    r2 = r2_score(Y, Y_pred)\n","\n","    print(f\"{label} - MSE: {mse:.2f}, R²: {r2:.4f}\")\n","\n","    # Scatter plot antara nilai aktual dan prediksi\n","    plt.figure(figsize=(6, 4))\n","    plt.scatter(Y, Y_pred, alpha=0.5)\n","    plt.xlabel(\"Actual SalePrice\")\n","    plt.ylabel(\"Predicted SalePrice\")\n","    plt.title(f\"Linear Regression {label}\")\n","\n","    filename = os.path.join(visualisasi_folder, f\"linear_regression_{label.lower()}.png\")\n","    plt.savefig(filename)\n","    plt.show()\n","\n","    # Residual plot\n","    residuals = Y - Y_pred\n","    plt.figure(figsize=(6, 4))\n","    plt.scatter(Y_pred, residuals, alpha=0.5)\n","    plt.axhline(y=0, color=\"red\", linestyle=\"--\")\n","    plt.xlabel(\"Predicted SalePrice\")\n","    plt.ylabel(\"Residuals\")\n","    plt.title(f\"Residual Plot {label}\")\n","\n","    filename = os.path.join(visualisasi_folder, f\"linear_residual_plot_{label.lower()}.png\")\n","    plt.savefig(filename)\n","    plt.show()\n","\n","    # Distribusi Residual\n","    plt.figure(figsize=(6, 4))\n","    sns.histplot(residuals, bins=30, kde=True)\n","    plt.xlabel(\"Residuals\")\n","    plt.ylabel(\"Frequency\")\n","    plt.title(f\"Residual Distribution {label}\")\n","\n","    filename = os.path.join(visualisasi_folder, f\"linear_residual_distribution_{label.lower()}.png\")\n","    plt.savefig(filename)\n","    plt.show()\n","\n","    return mse, r2\n","\n","# Evaluasi Linear Regression\n","print(\"\\nEvaluasi dengan Outlier:\")\n","mse_with, r2_with = linear_regression(X_with_outliers, Y_with_outliers, \"With_Outliers\")\n","\n","print(\"\\nEvaluasi tanpa Outlier:\")\n","mse_without, r2_without = linear_regression(X_without_outliers, Y_without_outliers, \"Without_Outliers\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"O395T8__GwI0","executionInfo":{"status":"ok","timestamp":1743037660989,"user_tz":-420,"elapsed":44,"user":{"displayName":"Dzakwan Akbar","userId":"10974690383539103573"}},"outputId":"201e262c-fb99-41e3-f2d9-6918ce966bca"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["Overwriting linear_regression.py\n"]}]},{"cell_type":"code","source":["!python linear_regression.py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7ATNGvnUG3G8","executionInfo":{"status":"ok","timestamp":1743037672351,"user_tz":-420,"elapsed":7951,"user":{"displayName":"Dzakwan Akbar","userId":"10974690383539103573"}},"outputId":"79f57f4d-5907-4f26-911a-87f6db861da8"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["Dataset berhasil dimuat!\n","\n","Evaluasi dengan Outlier:\n","With_Outliers - MSE: 988825363.66, R²: 0.8563\n","Figure(600x400)\n","Figure(600x400)\n","Figure(600x400)\n","\n","Evaluasi tanpa Outlier:\n","Without_Outliers - MSE: 0.02, R²: 0.9640\n","Figure(600x400)\n","Figure(600x400)\n","Figure(600x400)\n"]}]},{"cell_type":"code","source":["%%writefile polinomial.py\n","import os\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.preprocessing import PolynomialFeatures\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import mean_squared_error, r2_score\n","\n","# Load dataset\n","file_with_outliers = \"data_with_outliers.csv\"\n","file_without_outliers = \"dataset_clean_proces.csv\"\n","\n","try:\n","    df_with_outliers = pd.read_csv(file_with_outliers)\n","    df_without_outliers = pd.read_csv(file_without_outliers)\n","    print(\"Dataset berhasil dimuat!\")\n","except Exception as e:\n","    print(f\"Error saat membaca dataset: {e}\")\n","    exit()\n","\n","# Buat folder untuk menyimpan visualisasi jika belum ada\n","output_dir = \"polynomial_visualisasi\"\n","os.makedirs(output_dir, exist_ok=True)\n","\n","# Menghapus missing values\n","df_with_outliers.dropna(inplace=True)\n","df_without_outliers.dropna(inplace=True)\n","\n","# Memastikan semua kolom numerik\n","df_with_outliers = df_with_outliers.select_dtypes(include=[np.number])\n","df_without_outliers = df_without_outliers.select_dtypes(include=[np.number])\n","\n","# Memisahkan fitur dan target\n","if \"SalePrice\" in df_with_outliers.columns and \"SalePrice\" in df_without_outliers.columns:\n","    X_with_outliers = df_with_outliers.drop(columns=[\"SalePrice\"])\n","    Y_with_outliers = df_with_outliers[\"SalePrice\"]\n","\n","    X_without_outliers = df_without_outliers.drop(columns=[\"SalePrice\"])\n","    Y_without_outliers = df_without_outliers[\"SalePrice\"]\n","else:\n","    print(\"Kolom 'SalePrice' tidak ditemukan dalam dataset.\")\n","    exit()\n","\n","# Fungsi untuk menerapkan Polynomial Regression dan visualisasi hasil\n","def polynomial_regression(degree, X, Y, label):\n","    poly = PolynomialFeatures(degree=degree)\n","    X_poly = poly.fit_transform(X)\n","\n","    model = LinearRegression()\n","    model.fit(X_poly, Y)\n","    Y_pred = model.predict(X_poly)\n","\n","    mse = mean_squared_error(Y, Y_pred)\n","    r2 = r2_score(Y, Y_pred)\n","\n","    print(f\"{label} - Degree {degree} - MSE: {mse:.2f}, R²: {r2:.4f}\")\n","\n","    # Scatter plot (Prediksi vs Aktual)\n","    plt.figure(figsize=(6, 4))\n","    plt.scatter(Y, Y_pred, alpha=0.5, label=f\"Degree {degree}\")\n","    plt.xlabel(\"Actual SalePrice\")\n","    plt.ylabel(\"Predicted SalePrice\")\n","    plt.title(f\"Polynomial Regression {label} - Degree {degree}\")\n","    plt.legend()\n","    plt.savefig(f\"{output_dir}/polynomial_scatter_{label.lower()}_degree_{degree}.png\")\n","    plt.close()\n","\n","    # Residual Plot\n","    residuals = Y - Y_pred\n","    plt.figure(figsize=(6, 4))\n","    plt.scatter(Y_pred, residuals, alpha=0.5)\n","    plt.axhline(y=0, color=\"r\", linestyle=\"--\")\n","    plt.xlabel(\"Predicted SalePrice\")\n","    plt.ylabel(\"Residuals\")\n","    plt.title(f\"Residual Plot {label} - Degree {degree}\")\n","    plt.savefig(f\"{output_dir}/polynomial_residual_{label.lower()}_degree_{degree}.png\")\n","    plt.close()\n","\n","    # Distribusi Residual\n","    plt.figure(figsize=(6, 4))\n","    sns.histplot(residuals, bins=30, kde=True)\n","    plt.xlabel(\"Residuals\")\n","    plt.ylabel(\"Frequency\")\n","    plt.title(f\"Residual Distribution {label} - Degree {degree}\")\n","    plt.savefig(f\"{output_dir}/polynomial_residual_dist_{label.lower()}_degree_{degree}.png\")\n","    plt.close()\n","\n","    return mse, r2\n","\n","# Evaluasi Polynomial Regression\n","print(\"\\nEvaluasi dengan Outlier:\")\n","mse_wo_d2, r2_wo_d2 = polynomial_regression(2, X_with_outliers, Y_with_outliers, \"With_Outliers\")\n","mse_wo_d3, r2_wo_d3 = polynomial_regression(3, X_with_outliers, Y_with_outliers, \"With_Outliers\")\n","\n","print(\"\\nEvaluasi tanpa Outlier:\")\n","mse_wo_no_d2, r2_wo_no_d2 = polynomial_regression(2, X_without_outliers, Y_without_outliers, \"Without_Outliers\")\n","mse_wo_no_d3, r2_wo_no_d3 = polynomial_regression(3, X_without_outliers, Y_without_outliers, \"Without_Outliers\")\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"33a2HWovBTzk","executionInfo":{"status":"ok","timestamp":1743038965173,"user_tz":-420,"elapsed":56,"user":{"displayName":"Dzakwan Akbar","userId":"10974690383539103573"}},"outputId":"b70987e3-479c-4723-dd30-3517cd5ffbfc"},"execution_count":42,"outputs":[{"output_type":"stream","name":"stdout","text":["Overwriting polinomial.py\n"]}]},{"cell_type":"code","source":["!python polinomial.py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hF7RjdCtCWDM","executionInfo":{"status":"ok","timestamp":1743039028648,"user_tz":-420,"elapsed":58752,"user":{"displayName":"Dzakwan Akbar","userId":"10974690383539103573"}},"outputId":"65bd819a-37aa-4aac-deca-4ad707d6fc76"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["Dataset berhasil dimuat!\n","\n","Evaluasi dengan Outlier:\n","With_Outliers - Degree 2 - MSE: 0.00, R²: 1.0000\n","With_Outliers - Degree 3 - MSE: 0.00, R²: 1.0000\n","\n","Evaluasi tanpa Outlier:\n","Without_Outliers - Degree 2 - MSE: 0.00, R²: 1.0000\n","Without_Outliers - Degree 3 - MSE: 0.00, R²: 1.0000\n"]}]},{"cell_type":"code","source":["%%writefile knnregression.py\n","import os\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.neighbors import KNeighborsRegressor\n","from sklearn.metrics import mean_squared_error, r2_score\n","\n","# Membuat folder untuk menyimpan visualisasi\n","output_folder = \"knn_visualisasi\"\n","os.makedirs(output_folder, exist_ok=True)\n","\n","# Load dataset\n","file_with_outliers = \"data_with_outliers.csv\"\n","file_without_outliers = \"dataset_clean_proces.csv\"\n","\n","try:\n","    df_with_outliers = pd.read_csv(file_with_outliers)\n","    df_without_outliers = pd.read_csv(file_without_outliers)\n","    print(\"Dataset berhasil dimuat!\")\n","except Exception as e:\n","    print(f\"Error saat membaca dataset: {e}\")\n","    exit()\n","\n","# Menghapus missing values\n","df_with_outliers.dropna(inplace=True)\n","df_without_outliers.dropna(inplace=True)\n","\n","# Memastikan semua kolom numerik\n","df_with_outliers = df_with_outliers.select_dtypes(include=[np.number])\n","df_without_outliers = df_without_outliers.select_dtypes(include=[np.number])\n","\n","# Memisahkan fitur dan target\n","target_column = \"SalePrice\"\n","\n","if target_column in df_with_outliers.columns and target_column in df_without_outliers.columns:\n","    X_with_outliers = df_with_outliers.drop(columns=[target_column])\n","    Y_with_outliers = df_with_outliers[target_column]\n","\n","    X_without_outliers = df_without_outliers.drop(columns=[target_column])\n","    Y_without_outliers = df_without_outliers[target_column]\n","else:\n","    print(f\"Kolom '{target_column}' tidak ditemukan dalam dataset.\")\n","    exit()\n","\n","# Fungsi untuk menerapkan KNN Regression dan membuat visualisasi\n","def knn_regression(X, Y, label, k):\n","    model = KNeighborsRegressor(n_neighbors=k)\n","    model.fit(X, Y)\n","    Y_pred = model.predict(X)\n","\n","    mse = mean_squared_error(Y, Y_pred)\n","    r2 = r2_score(Y, Y_pred)\n","\n","    print(f\"KNN Regression {label} (K={k}) - MSE: {mse:.2f}, R²: {r2:.4f}\")\n","\n","    # Scatter plot antara nilai aktual dan prediksi\n","    plt.figure(figsize=(6, 4))\n","    plt.scatter(Y, Y_pred, alpha=0.5)\n","    plt.xlabel(\"Actual SalePrice\")\n","    plt.ylabel(\"Predicted SalePrice\")\n","    plt.title(f\"KNN Regression {label} (K={k})\")\n","    filename = os.path.join(output_folder, f\"knn_regression_{label.lower()}_k{k}.png\")\n","    plt.savefig(filename)\n","    plt.close()\n","\n","    # Residual plot\n","    residuals = Y - Y_pred\n","    plt.figure(figsize=(6, 4))\n","    plt.scatter(Y_pred, residuals, alpha=0.5)\n","    plt.axhline(y=0, color=\"red\", linestyle=\"--\")\n","    plt.xlabel(\"Predicted SalePrice\")\n","    plt.ylabel(\"Residuals\")\n","    plt.title(f\"Residual Plot {label} (K={k})\")\n","    filename = os.path.join(output_folder, f\"residual_plot_{label.lower()}_k{k}.png\")\n","    plt.savefig(filename)\n","    plt.close()\n","\n","    # Distribusi Residual\n","    plt.figure(figsize=(6, 4))\n","    sns.histplot(residuals, bins=30, kde=True)\n","    plt.xlabel(\"Residuals\")\n","    plt.ylabel(\"Frequency\")\n","    plt.title(f\"Residual Distribution {label} (K={k})\")\n","    filename = os.path.join(output_folder, f\"residual_distribution_{label.lower()}_k{k}.png\")\n","    plt.savefig(filename)\n","    plt.close()\n","\n","    return mse, r2\n","\n","# Evaluasi untuk K = 3, 5, 7\n","k_values = [3, 5, 7]\n","\n","for k in k_values:\n","    print(f\"\\nEvaluasi dengan Outlier (K={k}):\")\n","    knn_regression(X_with_outliers, Y_with_outliers, \"With_Outliers\", k)\n","\n","    print(f\"\\nEvaluasi tanpa Outlier (K={k}):\")\n","    knn_regression(X_without_outliers, Y_without_outliers, \"Without_Outliers\", k)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aBkohfPMFk_k","executionInfo":{"status":"ok","timestamp":1743039640129,"user_tz":-420,"elapsed":42,"user":{"displayName":"Dzakwan Akbar","userId":"10974690383539103573"}},"outputId":"17130d13-3a20-4ee5-ad7e-7bacd74c5408"},"execution_count":44,"outputs":[{"output_type":"stream","name":"stdout","text":["Overwriting knnregression.py\n"]}]},{"cell_type":"code","source":["!python knnregression.py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xIty18sCFsCK","executionInfo":{"status":"ok","timestamp":1743039652249,"user_tz":-420,"elapsed":8055,"user":{"displayName":"Dzakwan Akbar","userId":"10974690383539103573"}},"outputId":"53e0b522-5c49-4b8a-f98f-dda251ad2814"},"execution_count":45,"outputs":[{"output_type":"stream","name":"stdout","text":["Dataset berhasil dimuat!\n","\n","Evaluasi dengan Outlier (K=3):\n","KNN Regression With_Outliers (K=3) - MSE: 1203348947.03, R²: 0.8252\n","\n","Evaluasi tanpa Outlier (K=3):\n","KNN Regression Without_Outliers (K=3) - MSE: 0.10, R²: 0.8270\n","\n","Evaluasi dengan Outlier (K=5):\n","KNN Regression With_Outliers (K=5) - MSE: 1524096871.23, R²: 0.7786\n","\n","Evaluasi tanpa Outlier (K=5):\n","KNN Regression Without_Outliers (K=5) - MSE: 0.13, R²: 0.7684\n","\n","Evaluasi dengan Outlier (K=7):\n","KNN Regression With_Outliers (K=7) - MSE: 1734484325.41, R²: 0.7480\n","\n","Evaluasi tanpa Outlier (K=7):\n","KNN Regression Without_Outliers (K=7) - MSE: 0.15, R²: 0.7343\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2iApA_-1Q9yd","executionInfo":{"status":"ok","timestamp":1743040397440,"user_tz":-420,"elapsed":1396,"user":{"displayName":"Dzakwan Akbar","userId":"10974690383539103573"}},"outputId":"412253bd-2258-4245-cc62-4aef2fc28a1c"},"execution_count":79,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["!cp \"/content/drive/My Drive/Colab Notebooks/Lab4_23758008.ipynb\" \"/content/supervised-learning-dzkwanakbr/\"\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GO4VDSaNRShx","executionInfo":{"status":"ok","timestamp":1743040142368,"user_tz":-420,"elapsed":106,"user":{"displayName":"Dzakwan Akbar","userId":"10974690383539103573"}},"outputId":"04e603d8-a4ba-4c10-acc5-3f565250624b"},"execution_count":70,"outputs":[{"output_type":"stream","name":"stdout","text":["cp: cannot stat '/content/drive/My Drive/Colab Notebooks/Lab4_23758008.ipynb': No such file or directory\n"]}]},{"cell_type":"code","source":["!cp /content/drive/MyDrive/Colab Notebooks/Lab4_23758008.ipnyb /content/supervised-learning-dzkwanakbr/\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"22K9ugKmR1U6","executionInfo":{"status":"ok","timestamp":1743040472945,"user_tz":-420,"elapsed":103,"user":{"displayName":"Dzakwan Akbar","userId":"10974690383539103573"}},"outputId":"ec49a91b-b399-49c6-d5e6-dd424171a988"},"execution_count":80,"outputs":[{"output_type":"stream","name":"stdout","text":["cp: cannot stat '/content/drive/MyDrive/Colab': No such file or directory\n","cp: cannot stat 'Notebooks/Lab4_23758008.ipnyb': No such file or directory\n"]}]},{"cell_type":"code","source":["!ls \"/content/\""],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CzjVoSszTN1-","executionInfo":{"status":"ok","timestamp":1743040379375,"user_tz":-420,"elapsed":115,"user":{"displayName":"Dzakwan Akbar","userId":"10974690383539103573"}},"outputId":"fcf854e3-24b5-4f67-abcc-0c6120eae3b8"},"execution_count":77,"outputs":[{"output_type":"stream","name":"stdout","text":["drive  sample_data  supervised-learning-dzkwanakbr\n"]}]}]}